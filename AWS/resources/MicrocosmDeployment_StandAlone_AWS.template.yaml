AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ResourceSuffix:
    Type: String
    Default: "TST"
    MinLength: 3
    MaxLength: 15
    AllowedPattern: "^[a-zA-Z0-9]*$"
    Description: Name suffix for resource creation
  EC2KeyPairName:
    Type: String
    Description: Enter your key pair name (found in the EC2 Console under Key Pairs)

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [ "ecsTaskExecutionRoleDeploy", !Ref ResourceSuffix ]]
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [ "CodeDeployServiceRole", !Ref ResourceSuffix ]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: codedeploy.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AutoScalingFullAccess
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSDataLifecycleManagerServiceRole
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
  EC2PlusS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [ "EC2PlusS3Role", !Ref ResourceSuffix ]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess

  EC2PlusS3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [ "EC2PlusS3Role", !Ref ResourceSuffix ]]
      Path: "/"
      Roles:
        - !Ref EC2PlusS3Role

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/25
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-2b
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.128/25
  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "VPC Security Group"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: Gitlab
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
        Description: Jenkins
      - IpProtocol: tcp
        FromPort: 8081
        ToPort: 8081
        CidrIp: 0.0.0.0/0
        Description: OWASP
      - IpProtocol: tcp
        FromPort: 50000
        ToPort: 50000
        CidrIp: 0.0.0.0/0
        Description: Nexus
      - IpProtocol: tcp
        FromPort: 8090
        ToPort: 8090
        CidrIp: 0.0.0.0/0
        Description: OWASP
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0
        Description: Sonarqube
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        Description: SSH
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: Gitlab
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCRoutingTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
    DependsOn:
      - Subnet1
      - Subnet2
  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref VPCRoutingTable
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachment
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet1'
      RouteTableId: !Ref 'VPCRoutingTable'
  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet2'
      RouteTableId: !Ref 'VPCRoutingTable'

  s3petclinicdeployTST:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: petclinic
          Value: deploy

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties :
      ClusterName : !Join ["-", [ "microcosm_deploy", !Ref ResourceSuffix ]]

  petclinicLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/ecs/petclinic", !Ref ResourceSuffix ]]

  ECSTaskDefpetclinic:
    Type: AWS::ECS::TaskDefinition
    Properties :
      ContainerDefinitions :
        - Name: tomcat8
          Image: tomcat:8-jre8
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
            - ContainerPort: 80
              HostPort: 80
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["-", [ "/ecs/petclinic", !Ref ResourceSuffix ]]
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
          MountPoints:
            - ContainerPath: /opt/tomcat/webapps
              SourceVolume: webapps
      Volumes:
        - Name: webapps
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt IAMRole.Arn
      TaskRoleArn: !GetAtt IAMRole.Arn
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Cpu : 512
      Memory : 2048
  ECSServicepetclinic:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref ECSTaskDefpetclinic
      Cluster: !Ref ECSCluster
      ServiceName: !Join ["-", [ "petclinic", !Ref ResourceSuffix ]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref VPCSecurityGroup
    DependsOn:
    - ECSCluster
    - ECSTaskDefpetclinic
    - petclinicLogGroup

  PetclinicInstance1:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-0885e0cd6c51e6b89
      InstanceType: t2.large
      KeyName: !Ref EC2KeyPairName
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join ["-", [ "tomcat_codedeploy", !Ref ResourceSuffix ]]
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref Subnet1
          GroupSet:
            - !GetAtt VPCSecurityGroup.GroupId
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -x
              # For Tomcat AMI from marketplace | Linux/Unix, Ubuntu 16.04 | 64-bit (x86) Amazon Machine Image (AMI)
              # Debug with logs at /var/log/cloud-init-output.log
              # TODO "When a user data script is processed, it is copied to and executed from a directory in /var/lib/cloud. The script is not deleted after it is run. Be sure to delete the user data scripts from /var/lib/cloud before you create an AMI from the instance. Otherwise, the script will exist in this directory on any instance launched from the AMI and will be run when the instance is launched."
              apt-get -y update
              apt-get -y install ruby
              apt-get -y install wget
              cd /home/ubuntu
              wget https://aws-codedeploy-us-east-2.s3.amazonaws.com/latest/install
              chmod +x ./install
              ./install auto
              apt-get -y install python
              wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              wget https://s3.amazonaws.com/aws-codedeploy-us-east-2/cloudwatch/codedeploy_logs.conf
              chmod +x ./awslogs-agent-setup.py
              python awslogs-agent-setup.py -n -r REGION -c s3://aws-codedeploy-us-east-2/cloudwatch/awslogs.conf
              mkdir -p /var/awslogs/etc/config
              cp codedeploy_logs.conf /var/awslogs/etc/config/
              service awslogs restart
              service codedeploy-agent start
      IamInstanceProfile: !Join ["-", [ "EC2PlusS3Role", !Ref ResourceSuffix ]]


  PetclinicInstance2:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-0885e0cd6c51e6b89
      InstanceType: t2.large
      KeyName: !Ref EC2KeyPairName
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join ["-", [ "tomcat_codedeploy", !Ref ResourceSuffix ]]
      NetworkInterfaces:
        - DeleteOnTermination: true
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref Subnet2
          GroupSet:
            - !GetAtt VPCSecurityGroup.GroupId
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -x
              # For Tomcat AMI from marketplace | Linux/Unix, Ubuntu 16.04 | 64-bit (x86) Amazon Machine Image (AMI)
              # Debug with logs at /var/log/cloud-init-output.log
              # TODO "When a user data script is processed, it is copied to and executed from a directory in /var/lib/cloud. The script is not deleted after it is run. Be sure to delete the user data scripts from /var/lib/cloud before you create an AMI from the instance. Otherwise, the script will exist in this directory on any instance launched from the AMI and will be run when the instance is launched."
              apt-get -y update
              apt-get -y install ruby
              apt-get -y install wget
              cd /home/ubuntu
              wget https://aws-codedeploy-us-east-2.s3.amazonaws.com/latest/install
              chmod +x ./install
              ./install auto
              apt-get -y install python
              wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              wget https://s3.amazonaws.com/aws-codedeploy-us-east-2/cloudwatch/codedeploy_logs.conf
              chmod +x ./awslogs-agent-setup.py
              python awslogs-agent-setup.py -n -r REGION -c s3://aws-codedeploy-us-east-2/cloudwatch/awslogs.conf
              mkdir -p /var/awslogs/etc/config
              cp codedeploy_logs.conf /var/awslogs/etc/config/
              service awslogs restart
              service codedeploy-agent start
      IamInstanceProfile: !Join ["-", [ "EC2PlusS3Role", !Ref ResourceSuffix ]]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: petclinicTST #Change to petclinicTSTNAME
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Type: 'application'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds : 30
      HealthCheckTimeoutSeconds : 20
      HealthyThresholdCount : 2
      Name: !Join ["-", [ "petclinicTargetGroup", !Ref ResourceSuffix ]]
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref PetclinicInstance1
          Port: 80
        - Id: !Ref PetclinicInstance2
          Port: 80
      UnhealthyThresholdCount: 10
      VpcId: !Ref VPC

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP

  jenkinsjobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/jenkins/jobs", !Ref ResourceSuffix ]]

  CodeDeplyApplication:
    Type: AWS::CodeDeploy::Application
    Properties :
      ApplicationName : petclinicTST #Change to petclinicTSTNAME
      ComputePlatform : Server

  CodeDeployConfig:
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties :
      DeploymentConfigName : !Join ["-", [ "petclinicconfig", !Ref ResourceSuffix ]]
      MinimumHealthyHosts :
        Type: "HOST_COUNT"
        Value: 0

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties :
      ApplicationName : !Ref CodeDeplyApplication
      AutoRollbackConfiguration :
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
          - DEPLOYMENT_STOP_ON_REQUEST
      DeploymentConfigName : !Ref CodeDeployConfig
      DeploymentGroupName : !Join ["-", [ "petclinicdeploymentgroup", !Ref ResourceSuffix ]]
      DeploymentStyle :
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagFilters :
        - Key : Name
          Type : KEY_AND_VALUE
          Value : !Join ["-", [ "tomcat_codedeploy", !Ref ResourceSuffix ]]
      LoadBalancerInfo :
        TargetGroupInfoList :
          - Name: !Join ["-", [ "petclinicTargetGroup", !Ref ResourceSuffix ]]
      ServiceRoleArn : !GetAtt CodeDeployRole.Arn