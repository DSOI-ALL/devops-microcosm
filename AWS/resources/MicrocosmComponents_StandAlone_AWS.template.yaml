AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ResourceSuffix:
    Type: String
    Default: "TST"
    MinLength: 3
    MaxLength: 15
    AllowedPattern: "^[a-zA-Z0-9]*$"
    Description: Name suffix for resource creation

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [ "ecsTaskExecutionRole", !Ref ResourceSuffix ]]
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/25
  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "VPC Security Group"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: Gitlab
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
        Description: Jenkins
      - IpProtocol: tcp
        FromPort: 8081
        ToPort: 8081
        CidrIp: 0.0.0.0/0
        Description: OWASP
      - IpProtocol: tcp
        FromPort: 50000
        ToPort: 50000
        CidrIp: 0.0.0.0/0
        Description: Nexus
      - IpProtocol: tcp
        FromPort: 8090
        ToPort: 8090
        CidrIp: 0.0.0.0/0
        Description: OWASP
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0
        Description: Sonarqube
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        Description: SSH
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: Gitlab
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCRoutingTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
    DependsOn:
      - Subnet1
  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref VPCRoutingTable
      GatewayId: !Ref InternetGateway
    DependsOn:
      - GatewayAttachment
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  StudentRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet1'
      RouteTableId: !Ref 'VPCRoutingTable'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties :
      ClusterName: !Join ["-", [ "microcosm2", !Ref ResourceSuffix ]]

  gitlabLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/ecs/gitlab", !Ref ResourceSuffix ]]

  ECSTaskDefgitlab:
    Type: AWS::ECS::TaskDefinition
    Properties :
      ContainerDefinitions :
        - Name: !Join ["-", [ "gitlab", !Ref ResourceSuffix ]]
          Image: gitlab/gitlab-ce
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
            - ContainerPort: 443
              HostPort: 443
          Essential: 'true'
          Environment:
            - Name: GITLAB_OMNIBUS_CONFIG
              Value: "gitlab_rails['display_initial_root_password'] = true;"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["-", [ "/ecs/gitlab", !Ref ResourceSuffix ]]
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
          MountPoints:
            - ContainerPath: /etc/gitlab
              SourceVolume: gitlab-config
            - ContainerPath: /var/log/gitlab
              SourceVolume: gitlab-logs
            - ContainerPath: /var/opt/gitlab
              SourceVolume: gitlab-data
      Volumes:
        - Name: gitlab-config
        - Name: gitlab-logs
        - Name: gitlab-data
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt IAMRole.Arn
      TaskRoleArn: !GetAtt IAMRole.Arn
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Cpu : 1024
      Memory : 4096
  ECSServicegitlab:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref ECSTaskDefgitlab
      Cluster: !Ref ECSCluster
      ServiceName: !Join ["-", [ "gitlab", !Ref ResourceSuffix ]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref VPCSecurityGroup
    DependsOn:
    - ECSCluster
    - ECSTaskDefgitlab
    - gitlabLogGroup

  jenkinsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/ecs/jenkins", !Ref ResourceSuffix ]]

  ECSTaskDefjenkins:
    Type: AWS::ECS::TaskDefinition
    Properties :
      ContainerDefinitions :
        - Name: jenkinsTST #Change to jenkinsTSTName
          Image: h1kkan/jenkins-docker:lts
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["-", [ "/ecs/jenkins", !Ref ResourceSuffix ]]
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
          Environment: []
          MountPoints:
            - ContainerPath: /var/jenkins_home
              SourceVolume: jenkins_home
      Volumes:
        - Name: jenkins_home
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt IAMRole.Arn
      TaskRoleArn: !GetAtt IAMRole.Arn
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Cpu : 1024
      Memory : 5120
  ECSServicejenkins:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref ECSTaskDefjenkins
      Cluster: !Ref ECSCluster
      ServiceName: !Join ["-", [ "jenkins", !Ref ResourceSuffix ]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref VPCSecurityGroup
    DependsOn:
    - ECSCluster
    - ECSTaskDefjenkins
    - jenkinsLogGroup

  nexusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/ecs/nexus", !Ref ResourceSuffix ]]

  ECSTaskDefnexus:
    Type: AWS::ECS::TaskDefinition
    Properties :
      ContainerDefinitions :
        - Name: !Join ["-", [ "sonatype_nexus", !Ref ResourceSuffix ]]
          Image: sonatype/nexus
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["-", [ "/ecs/nexus", !Ref ResourceSuffix ]]
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
          Environment: []
          MountPoints:
            - ContainerPath: /sonatype-work
              SourceVolume: nexus-data
      Volumes:
        - Name: nexus-data
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt IAMRole.Arn
      TaskRoleArn: !GetAtt IAMRole.Arn
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Cpu : 512
      Memory : 1024
  ECSServicenexus:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref ECSTaskDefnexus
      Cluster: !Ref ECSCluster
      ServiceName:  !Join ["-", [ "nexus", !Ref ResourceSuffix ]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref VPCSecurityGroup
    DependsOn:
    - ECSCluster
    - ECSTaskDefnexus
    - nexusLogGroup

  sonarqubeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/ecs/sonarqube", !Ref ResourceSuffix ]]

  ECSTaskDefsonarqube:
    Type: AWS::ECS::TaskDefinition
    Properties :
      ContainerDefinitions :
        - Name: !Join ["-", [ "sonarqube", !Ref ResourceSuffix ]]
          Image: sonarqube:8.9.9-community
          PortMappings:
            - ContainerPort: 9000
              HostPort: 9000
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["-", [ "/ecs/sonarqube", !Ref ResourceSuffix ]]
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
          Environment: []
          MountPoints:
            - ContainerPath: /opt/sonarqube/conf
              SourceVolume: sonarqube_conf
            - ContainerPath: /opt/sonarqube/data
              SourceVolume: sonarqube_data
            - ContainerPath: /opt/sonarqube/
              SourceVolume: sonarqube_extensions
            - ContainerPath: /opt/sonarqube/lib/bundled-plugins
              SourceVolume: sonarqube_bundled-plugins
      Volumes:
        - Name: sonarqube_conf
        - Name: sonarqube_data
        - Name: sonarqube_extensions
        - Name: sonarqube_bundled-plugins
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt IAMRole.Arn
      TaskRoleArn: !GetAtt IAMRole.Arn
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Cpu : 1024
      Memory : 4096
  ECSServicesonarqube:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref ECSTaskDefsonarqube
      Cluster: !Ref ECSCluster
      ServiceName: !Join ["-", [ "sonarqube", !Ref ResourceSuffix ]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref VPCSecurityGroup
    DependsOn:
    - ECSCluster
    - ECSTaskDefsonarqube
    - sonarqubeLogGroup

  owaspzapLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["-", [ "/ecs/owaspzap", !Ref ResourceSuffix ]]

  ECSTaskDefowaspzap:
    Type: AWS::ECS::TaskDefinition
    Properties :
      ContainerDefinitions :
        - Name: !Join ["-", [ "owaspzap", !Ref ResourceSuffix ]]
          Image: owasp/zap2docker-stable
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
            - ContainerPort: 8090
              HostPort: 8090
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ["-", [ "/ecs/owaspzap", !Ref ResourceSuffix ]]
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
          EntryPoint:
            - zap-webswing.sh
          Environment: []
          MountPoints: []
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt IAMRole.Arn
      TaskRoleArn: !GetAtt IAMRole.Arn
      RequiresCompatibilities:
        - "EC2"
        - "FARGATE"
      Cpu : 512
      Memory : 1024
  ECSServiceowaspzap:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref ECSTaskDefowaspzap
      Cluster: !Ref ECSCluster
      ServiceName: !Join ["-", [ "owaspzap", !Ref ResourceSuffix ]]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
          SecurityGroups:
            - !Ref VPCSecurityGroup
    DependsOn:
    - ECSCluster
    - ECSTaskDefowaspzap
    - owaspzapLogGroup
